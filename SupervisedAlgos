# SupervisedAlgos

1. Linear Regression

from sklearn.linear_model import LinearRegression
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

X, y = make_regression(n_samples=100, n_features=1, noise=10)
X_train, X_test, y_train, y_test = train_test_split(X, y)

model = LinearRegression()
model.fit(X_train, y_train)
predictions = model.predict(X_test)

print("MSE:", mean_squared_error(y_test, predictions))

2. Logistic Regression

from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_classification
from sklearn.metrics import accuracy_score

X, y = make_classification(n_samples=100, n_features=4)
X_train, X_test, y_train, y_test = train_test_split(X, y)

model = LogisticRegression()
model.fit(X_train, y_train)
print("Accuracy:", accuracy_score(y_test, model.predict(X_test)))

3. Decision Tree

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(max_depth=3)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

4. Random Forest

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators=100, max_depth=4)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

5. Support Vector Machine (SVM)

from sklearn.svm import SVC

model = SVC(C=1.0, kernel='rbf')
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

6. K-Nearest Neighbors (KNN)

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors=5)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

7. XGBoost

from xgboost import XGBClassifier

model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', n_estimators=100)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

8. LightGBM

from lightgbm import LGBMClassifier

model = LGBMClassifier(n_estimators=100, learning_rate=0.1)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))

9. Neural Networks (MLP)

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(hidden_layer_sizes=(50, ), max_iter=1000)
model.fit(X_train, y_train)
print("Accuracy:", model.score(X_test, y_test))
